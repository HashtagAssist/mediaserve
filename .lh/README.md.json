{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1741637185939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741637226080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,5 +76,107 @@\n - **Authentication**: JWT-based authentication system\n \n ## üìö API Documentation\n \n-Once the server is running, you can access the Swagger API documentation at: \n\\ No newline at end of file\n+Once the server is running, you can access the Swagger API documentation at:\n+\n+```\n+http://localhost:3000/api\n+```\n+\n+The API follows RESTful principles with consistent response formats:\n+\n+```json\n+{\n+  \"status\": \"success\",\n+  \"data\": { ... },\n+  \"message\": \"Optional message\"\n+}\n+```\n+\n+## üß© Core Modules\n+\n+- **Auth**: User authentication and authorization\n+- **Media**: Core media management functionality\n+- **Library**: Media library organization\n+- **Metadata**: Fetching and storing media metadata\n+- **Streaming**: Media streaming capabilities\n+- **User**: User management\n+- **Playlist**: Custom playlist creation and management\n+- **Search**: Advanced search functionality\n+- **Thumbnail**: Media artwork management\n+\n+## üõ†Ô∏è Development\n+\n+### Code Style\n+\n+The project uses ESLint and Prettier for code formatting:\n+\n+```bash\n+# Format code\n+npm run format\n+\n+# Lint code\n+npm run lint\n+```\n+\n+### Testing\n+\n+```bash\n+# Run unit tests\n+npm run test\n+\n+# Run e2e tests\n+npm run test:e2e\n+\n+# Generate test coverage\n+npm run test:cov\n+```\n+\n+### Building for Production\n+\n+```bash\n+# Build the application\n+npm run build\n+\n+# Start in production mode\n+npm run start:prod\n+```\n+\n+## üîÑ CI/CD\n+\n+The project uses GitHub Actions for continuous integration and deployment. Each push to the main branch triggers:\n+\n+1. Code linting\n+2. Unit and integration tests\n+3. Build process\n+4. (Optional) Deployment to staging/production\n+\n+## üìã Project Roadmap\n+\n+- [x] Core API functionality\n+- [x] User authentication\n+- [x] Basic media management\n+- [ ] Advanced search capabilities\n+- [ ] Media transcoding\n+- [ ] Mobile client applications\n+- [ ] TV client applications\n+- [ ] Media recommendations\n+- [ ] Social features\n+\n+## ü§ù Contributing\n+\n+Contributions are welcome! Please feel free to submit a Pull Request.\n+\n+1. Fork the repository\n+2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n+3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n+4. Push to the branch (`git push origin feature/amazing-feature`)\n+5. Open a Pull Request\n+\n+## üìú License\n+\n+This project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n+\n+## üìû Contact\n+\n+Project Link: [https://github.com/yourusername/mediaserver](https://github.com/yourusername/mediaserver) \n\\ No newline at end of file\n"
                },
                {
                    "date": 1741637393920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,37 @@\n \n ### Prerequisites\n \n - Node.js (v16+)\n-- PostgreSQL\n+- PostgreSQL (v13+)\n - FFmpeg (for media transcoding)\n \n+### FFmpeg Installation\n+\n+FFmpeg is required for media processing and transcoding:\n+\n+**Ubuntu/Debian:**\n+```bash\n+sudo apt update\n+sudo apt install ffmpeg\n+```\n+\n+**macOS:**\n+```bash\n+brew install ffmpeg\n+```\n+\n+**Windows:**\n+Download from [ffmpeg.org](https://ffmpeg.org/download.html) or install via Chocolatey:\n+```bash\n+choco install ffmpeg\n+```\n+\n+Verify installation:\n+```bash\n+ffmpeg -version\n+```\n+\n ### Installation\n \n 1. Clone the repository:\n    ```bash\n@@ -55,8 +81,12 @@\n    \n    # Server\n    PORT=3000\n    NODE_ENV=development\n+   \n+   # Media\n+   MEDIA_ROOT=/path/to/your/media\n+   THUMBNAILS_DIR=./thumbnails\n    ```\n \n 4. Start the development server:\n    ```bash\n@@ -92,8 +122,21 @@\n   \"message\": \"Optional message\"\n }\n ```\n \n+### Key API Endpoints\n+\n+| Endpoint | Method | Description |\n+|----------|--------|-------------|\n+| `/auth/login` | POST | User authentication |\n+| `/auth/register` | POST | User registration |\n+| `/media` | GET | List all media |\n+| `/media/:id` | GET | Get media details |\n+| `/libraries` | GET | List all libraries |\n+| `/streaming/:id` | GET | Stream media content |\n+| `/progress/:mediaId` | GET | Get watch progress |\n+| `/progress/:mediaId` | POST | Update watch progress |\n+\n ## üß© Core Modules\n \n - **Auth**: User authentication and authorization\n - **Media**: Core media management functionality\n@@ -104,8 +147,30 @@\n - **Playlist**: Custom playlist creation and management\n - **Search**: Advanced search functionality\n - **Thumbnail**: Media artwork management\n \n+## üìã Supported Media Formats\n+\n+### Video Formats\n+- MP4 (H.264, H.265)\n+- MKV\n+- AVI\n+- MOV\n+- WebM\n+\n+### Audio Formats\n+- MP3\n+- AAC\n+- FLAC\n+- OGG\n+- WAV\n+\n+### Subtitle Formats\n+- SRT\n+- VTT\n+- SUB\n+- SSA/ASS\n+\n ## üõ†Ô∏è Development\n \n ### Code Style\n \n@@ -141,26 +206,36 @@\n # Start in production mode\n npm run start:prod\n ```\n \n-## üîÑ CI/CD\n+## üîß Troubleshooting\n \n-The project uses GitHub Actions for continuous integration and deployment. Each push to the main branch triggers:\n+### Common Issues\n \n-1. Code linting\n-2. Unit and integration tests\n-3. Build process\n-4. (Optional) Deployment to staging/production\n+**Database Connection Errors**\n+- Ensure PostgreSQL is running\n+- Verify database credentials in `.env`\n+- Check network connectivity to database server\n \n+**Media Scanning Issues**\n+- Ensure media directories have correct permissions\n+- Verify FFmpeg is properly installed\n+- Check logs for specific scanning errors\n+\n+**Streaming Problems**\n+- Verify media file is not corrupted\n+- Check if file format is supported\n+- Ensure sufficient disk space for transcoding\n+\n ## üìã Project Roadmap\n \n - [x] Core API functionality\n - [x] User authentication\n - [x] Basic media management\n - [ ] Advanced search capabilities\n - [ ] Media transcoding\n - [ ] Mobile client applications\n-- [ ] TV client applications\n+- [ ] Web client applications\n - [ ] Media recommendations\n - [ ] Social features\n \n ## ü§ù Contributing\n@@ -172,8 +247,15 @@\n 3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n 4. Push to the branch (`git push origin feature/amazing-feature`)\n 5. Open a Pull Request\n \n+### Contribution Guidelines\n+\n+- Follow the existing code style\n+- Write tests for new features\n+- Update documentation for any changes\n+- Reference relevant issues in your pull request\n+\n ## üìú License\n \n This project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n \n"
                },
                {
                    "date": 1741637482019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,5 +260,5 @@\n This project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details.\n \n ## üìû Contact\n \n-Project Link: [https://github.com/yourusername/mediaserver](https://github.com/yourusername/mediaserver) \n\\ No newline at end of file\n+Project Link: [https://github.com/HashtagAssist/mediaserver](https://github.com/HashtagAssist/mediaserver) \n\\ No newline at end of file\n"
                }
            ],
            "date": 1741637185939,
            "name": "Commit-0",
            "content": "# KodiLike Media Server\n\n![License](https://img.shields.io/badge/license-GPL--3.0-blue.svg)\n![Version](https://img.shields.io/badge/version-0.0.1-green.svg)\n![NestJS](https://img.shields.io/badge/NestJS-10.0.0-red.svg)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0.0-blue.svg)\n\nA modern, API-first media server similar to Kodi, combining a robust backend infrastructure for media management and streaming with various frontend clients.\n\n## ‚ú® Features\n\n- **Media Management**: Organize your movies, TV shows, and music in one place\n- **Metadata Enrichment**: Automatically fetch and display detailed information about your media\n- **Streaming Capabilities**: Stream your content to any device with adaptive bitrate\n- **User Management**: Multiple user profiles with personalized settings\n- **Watch Progress Tracking**: Resume playback from where you left off\n- **Playlists & Collections**: Create and manage custom media collections\n- **Search & Filter**: Powerful search functionality across your media library\n- **Thumbnails & Artwork**: Beautiful visual representation of your media\n- **Subtitle Support**: Automatic detection and selection of subtitle files\n\n## üöÄ Getting Started\n\n### Prerequisites\n\n- Node.js (v16+)\n- PostgreSQL\n- FFmpeg (for media transcoding)\n\n### Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/yourusername/mediaserver.git\n   cd mediaserver\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Create a `.env` file in the root directory with the following content:\n   ```\n   # Database\n   DB_HOST=localhost\n   DB_PORT=5432\n   DB_USERNAME=postgres\n   DB_PASSWORD=yourpassword\n   DB_DATABASE=mediaserver\n   \n   # JWT\n   JWT_SECRET=your_jwt_secret_key\n   JWT_EXPIRATION=1d\n   \n   # Server\n   PORT=3000\n   NODE_ENV=development\n   ```\n\n4. Start the development server:\n   ```bash\n   npm run start:dev\n   ```\n\n5. The server will be running at `http://localhost:3000`\n\n## üèóÔ∏è Architecture\n\nThe project follows a modular architecture based on NestJS:\n\n- **API-First Design**: All functionality is exposed through a well-documented REST API\n- **Microservice-Oriented**: Modular components that can be developed and scaled independently\n- **Database**: PostgreSQL for metadata storage\n- **Media Storage**: Local filesystem with optional cloud storage support\n- **Authentication**: JWT-based authentication system\n\n## üìö API Documentation\n\nOnce the server is running, you can access the Swagger API documentation at: "
        }
    ]
}